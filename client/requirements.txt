# Event Hub - Requirements and API Specifications

## Project Overview
Event Hub is a web application that allows users to view, search, and register for events. 
The application includes user authentication, event listings, detailed event views, and an admin panel for event management.

## Frontend Tech Stack
- Vue 3 with TypeScript
- Tailwind CSS for styling
- ShadCN UI component library
- Vue Router for navigation

## Required API Endpoints

### Authentication
- POST /api/auth/login
  - Request: { email: string, password: string }
  - Response: { token: string, user: { id: number, name: string, email: string, isAdmin: boolean } }

- POST /api/auth/register
  - Request: { name: string, email: string, password: string }
  - Response: { message: string, success: boolean }

- POST /api/auth/logout
  - Request: Bearer Token in Authorization header
  - Response: { message: string, success: boolean }

- GET /api/auth/me
  - Request: Bearer Token in Authorization header
  - Response: { user: { id: number, name: string, email: string, isAdmin: boolean } }

### Events
- GET /api/events
  - Optional Query Params: search, category, page, limit
  - Response: { events: Event[], pagination: { total: number, page: number, limit: number } }

- GET /api/events/:id
  - Response: { event: Event }

- POST /api/events/:id/register
  - Request: Bearer Token in Authorization header
  - Response: { message: string, success: boolean, event: Event }

### Admin Endpoints
- POST /api/admin/events
  - Request: Bearer Token in Authorization header, event data as FormData (to support image upload)
  - Response: { message: string, success: boolean, event: Event }

- PUT /api/admin/events/:id
  - Request: Bearer Token in Authorization header, event data as FormData
  - Response: { message: string, success: boolean, event: Event }

- DELETE /api/admin/events/:id
  - Request: Bearer Token in Authorization header
  - Response: { message: string, success: boolean }

- GET /api/admin/users
  - Request: Bearer Token in Authorization header
  - Response: { users: User[], pagination: { total: number, page: number, limit: number } }

## Data Models

### Event
```
{
  id: number,
  title: string,
  description: string,
  date: string (YYYY-MM-DD),
  time: string (HH:MM AM/PM),
  endDate: string (YYYY-MM-DD),
  endTime: string (HH:MM AM/PM),
  location: string,
  address: string,
  category: string,
  organizer: string,
  organizerEmail: string,
  organizerPhone: string,
  image: string (URL),
  price: number,
  attendees: number,
  capacity: number,
  agenda: [
    { time: string, title: string }
  ],
  speakers: [
    { name: string, title: string, image: string }
  ]
}
```

### User
```
{
  id: number,
  name: string,
  email: string,
  isAdmin: boolean,
  registeredEvents: number[] // IDs of events the user is registered for
}
```

## Future Enhancements
- User profile management
- Event ratings and reviews
- Email notifications for event registration
- Calendar integration
- Payment processing for paid events
- QR code generation for event tickets